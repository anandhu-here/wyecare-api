"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const RegisterController_1 = __importDefault(require("./RegisterController"));
const LoginController_1 = __importDefault(require("./LoginController"));
const Auth_1 = __importDefault(require("../../middlewares/Auth"));
const UserService_1 = __importDefault(require("../../services/UserService"));
const ProfileService_1 = __importDefault(require("../../services/ProfileService"));
const ProfileController_1 = __importDefault(require("./ProfileController"));
const PasswordController_1 = __importDefault(require("./PasswordController"));
const ShiftService_1 = __importDefault(require("src/services/ShiftService"));
const auth_1 = __importDefault(require("src/validators/auth"));
const AuthRouter = (0, express_1.Router)();
const userSvc = new UserService_1.default();
const profileSvc = new ProfileService_1.default();
const shiftService = new ShiftService_1.default();
const registerCtlr = new RegisterController_1.default(userSvc, profileSvc, shiftService);
const loginCtlr = new LoginController_1.default(userSvc);
const profileCtlr = new ProfileController_1.default(profileSvc, userSvc);
const passwordCtlr = new PasswordController_1.default(userSvc);
AuthRouter.route("/send-register-otp").all(registerCtlr.sendRegisterOtp);
AuthRouter.route("/register").all(Auth_1.default.validateRegistration, registerCtlr.register);
AuthRouter.route("/unlink").patch(Auth_1.default.isAuthenticatedUser, auth_1.default, registerCtlr.removeLinkedUser);
AuthRouter.route("/link").patch(Auth_1.default.isAuthenticatedUser, registerCtlr.linkUser);
AuthRouter.route("/login").all(loginCtlr.login);
AuthRouter.route("/verify-token").all(loginCtlr.checkUser);
AuthRouter.route("/me").all(Auth_1.default.isAuthenticatedUser, profileCtlr.getProfileDetails);
AuthRouter.route("/linked-users/:accountType").get(Auth_1.default.isAuthenticatedUser, profileCtlr.getLinkedUsers);
AuthRouter.route("/send-reset-password-otp").all(passwordCtlr.sendResetPasswordOtp);
AuthRouter.route("/reset-password").all(passwordCtlr.resetPassword);
AuthRouter.route("/update-availability").put(Auth_1.default.isAuthenticatedUser, profileCtlr.updateAvailabilities);
AuthRouter.route("/availabilities/:date").delete(Auth_1.default.isAuthenticatedUser, profileCtlr.deleteAvailability);
AuthRouter.route("/search-users/:accountType").get(Auth_1.default.isAuthenticatedUser, profileCtlr.searchUsers);
AuthRouter.route("/users/:userType").get(profileCtlr.getUsers);
exports.default = AuthRouter;
//# sourceMappingURL=Router.js.map